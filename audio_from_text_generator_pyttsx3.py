'''
    –î–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞ –≤ —Å—Ç–∞–¥–∏–∏ –∑–∞–º–æ—Ä–æ–∑–∫–∏!
    –í—ã—Ö–æ–¥–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ —É–∂–∞—Å–Ω–æ–µ.
    –°–ª–µ–¥—É–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ pyttsx3 –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø—Ä–∏–µ–º–ª–µ–º–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤—É—á–∞–Ω–∏—è
'''
import pyttsx3
import os
import subprocess
from datetime import datetime
from dotenv import load_dotenv
import sys

load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
CONFIG = {
    'input': os.getenv('INPUT_FILE', 'input2.txt'),
    'output': os.getenv('OUTPUT_FILE', 'output.ogg'),
    'verbose': os.getenv('VERBOSE', 'true').lower() == 'true',
    'show_progress': os.getenv('SHOW_PROGRESS', 'true').lower() == 'true',
    'overwrite': os.getenv('OVERWRITE_OUTPUT', 'true').lower() == 'true',
    'language': os.getenv('LANGUAGE', 'ru'), # –Ø–∑—ã–∫ –¥–ª—è pyttsx3
    'rate': int(os.getenv('RATE', 150)),       # –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏ pyttsx3
    'volume': float(os.getenv('VOLUME', 1.0)),   # –ì—Ä–æ–º–∫–æ—Å—Ç—å pyttsx3
    'codec': os.getenv('AUDIO_CODEC', 'libopus'), # –ê—É–¥–∏–æ –∫–æ–¥–µ–∫ ffmpeg
    'channels': os.getenv('AUDIO_CHANNELS', '1'), # –ö–∞–Ω–∞–ª—ã ffmpeg
    'bitrate': os.getenv('BITRATE', '164k'),   # –ë–∏—Ç—Ä–µ–π—Ç ffmpeg
    'sample_rate': os.getenv('SAMPLE_RATE', '48000'), # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ ffmpeg
    'duration': int(os.getenv('DURATION', 0)),   # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è (0 - –Ω–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞—Ç—å)
}

def get_timestamp() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:–°–°."""
    return datetime.now().strftime("%H:%M:%S")

def log_message(message: str):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω verbose —Ä–µ–∂–∏–º."""
    if CONFIG['verbose']:
        print(f"[{get_timestamp()}] {message}", flush=True)

def read_input_text(input_file: str) -> str:
    """–ß–∏—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
    log_message(f"üìñ –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: {input_file}")
    try:
        with open(input_file, 'r', encoding='utf-8') as file:
            text = file.read().strip()
    except FileNotFoundError:
        log_message(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        sys.exit(1)
    if not text:
        log_message(f"‚ùå –û—à–∏–±–∫–∞: –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –ø—É—Å—Ç: {input_file}")
        sys.exit(1)
    log_message(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(text)}")
    return text

def initialize_tts_engine() -> pyttsx3.Engine:
    log_message("‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TTS –¥–≤–∏–∂–∫–∞")
    engine = pyttsx3.init()

    voices = engine.getProperty('voices')
    log_message("–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞:")
    for voice in voices:
        log_message(f" - –ò–º—è: {voice.name}")
        log_message(f"   ID: {voice.id}")
        log_message(f"   –Ø–∑—ã–∫(–∏): {voice.languages}")
        log_message(f"   –ü–æ–ª: {voice.gender}")
        log_message(f"   –í–æ–∑—Ä–∞—Å—Ç: {voice.age}")

    russian_voice_id = "Russian" # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º ID –≥–æ–ª–æ—Å–∞ "Russian"

    try: # –î–æ–±–∞–≤–∏–º try-except –±–ª–æ–∫ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≥–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ—Ç—Å—è
        engine.setProperty('voice', russian_voice_id)
        log_message(f"–ì–æ–ª–æ—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {russian_voice_id}")
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ–ª–æ—Å–∞ '{russian_voice_id}': {e}")
        log_message("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

    return engine

def generate_speech_file(engine: pyttsx3.Engine, text: str, temp_file: str):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—á—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª."""
    log_message("üó£Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏...")
    engine.save_to_file(text, temp_file)
    engine.runAndWait() # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—á–∏
    log_message(f"üîä –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")

def convert_audio_to_output_format(temp_file: str, output_file: str):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ —Ü–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É—è FFmpeg."""
    log_message("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ...")
    ffmpeg_command = [
        'ffmpeg',
        '-y' if CONFIG['overwrite'] else '-n', # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        '-loglevel', 'error', # –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥ FFmpeg
        '-i', temp_file,      # –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        '-c:a', CONFIG['codec'],    # –ê—É–¥–∏–æ –∫–æ–¥–µ–∫
        '-ar', CONFIG['sample_rate'], # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
        '-ac', CONFIG['channels'],   # –ö–∞–Ω–∞–ª—ã
        '-b:a', CONFIG['bitrate'],   # –ë–∏—Ç—Ä–µ–π—Ç
    ]
    if CONFIG['duration'] > 0:
        ffmpeg_command.extend(['-stream_loop', '-1', '-t', str(CONFIG['duration'])]) # –ó–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    ffmpeg_command.append(output_file) # –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª

    try:
        subprocess.run(ffmpeg_command, check=True, capture_output=True)
        log_message(f"‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤: {output_file}")
    except subprocess.CalledProcessError as e:
        error_message = e.stderr.decode('utf-8')
        log_message(f"‚ùå –û—à–∏–±–∫–∞ FFmpeg: {error_message}")
        sys.exit(1)

def cleanup_temp_file(temp_file: str):
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª."""
    if os.path.exists(temp_file):
        os.remove(temp_file)
        log_message(f"üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {temp_file}")

def process_text_to_speech():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å."""
    log_message("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞")
    start_time = datetime.now()
    temp_file = "temp_audio.wav" # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è pyttsx3 (WAV —Ñ–æ—Ä–º–∞—Ç)

    try:
        text_to_process = read_input_text(CONFIG['input'])
        tts_engine = initialize_tts_engine()
        generate_speech_file(tts_engine, text_to_process, temp_file)
        convert_audio_to_output_format(temp_file, CONFIG['output'])

        end_time = datetime.now()
        log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {end_time - start_time}")
        log_message(f"üíæ –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {CONFIG['output']}")

    except Exception as e:
        log_message(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

    finally:
        cleanup_temp_file(temp_file)
        log_message("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")


if __name__ == "__main__":
    process_text_to_speech()