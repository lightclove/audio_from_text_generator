# .env
# INPUT_FILE = "input2.txt"
# OUTPUT_FILE = "output.ogg"
# DURATION = 0
# LANGUAGE = "ru"
# TEMP_FILE = "temp.mp3"
# AUDIO_CODEC = "libopus"
# AUDIO_CHANNELS = "1"
# SAMPLE_RATE = "48000"
# BITRATE = "164k"
# VERBOSE = "true"
# SHOW_PROGRESS = "true"
# OVERWRITE_OUTPUT = "true"

from datetime import datetime
from dotenv import load_dotenv
from gtts import gTTS
import subprocess
import os
import sys

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    # IO settings
    'input': os.getenv('INPUT_FILE'),
    'output': os.getenv('OUTPUT_FILE'),
    'temp_file': os.getenv('TEMP_FILE'),

    # Audio params
    'codec': os.getenv('AUDIO_CODEC'),
    'channels': os.getenv('AUDIO_CHANNELS'),
    'bitrate': os.getenv('BITRATE'),
    'sample_rate': os.getenv('SAMPLE_RATE'),

    # Runtime settings
    'duration': int(os.getenv('DURATION')),
    'language': os.getenv('LANGUAGE'),
    'verbose': os.getenv('VERBOSE').lower() == 'true',
    'show_progress': os.getenv('SHOW_PROGRESS').lower() == 'true',
    'overwrite': os.getenv('OVERWRITE_OUTPUT').lower() == 'true'
}


def log(message: str):
    if CONFIG['verbose']:
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {message}", flush=True)


def parse_time(time_str: str) -> float:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ FFmpeg –≤ —Å–µ–∫—É–Ω–¥—ã"""
    try:
        hours, mins, secs = map(float, time_str.split(':'))
        return hours * 3600 + mins * 60 + secs
    except:
        return 0


def print_progress(current: float, total: float):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏"""
    percent = min(100, max(0, (current / total) * 100))
    bar_length = 40
    filled = int(bar_length * percent // 100)
    bar = '‚ñà' * filled + '-' * (bar_length - filled)
    sys.stdout.write(f"\r[{bar}] {percent:.1f}% ")
    sys.stdout.flush()


def main():
    start_script = datetime.now()

    try:
        log("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ")

        # –ß—Ç–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        log(f"üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {CONFIG['input']}")
        with open(CONFIG['input'], 'r', encoding='utf-8') as f:
            text = f.read().strip()
            if not text:
                raise ValueError("‚ùå –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –ø—É—Å—Ç")
        log(f"‚úî –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TTS
        log("üîä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é gTTS...")
        tts_start = datetime.now()
        gTTS(text=text, lang=CONFIG['language']).save(CONFIG['temp_file'])
        log(f"‚úî –ê—É–¥–∏–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ {datetime.now() - tts_start}")

        # –°–±–æ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã FFmpeg
        cmd = [
            'ffmpeg',
            '-y' if CONFIG['overwrite'] else '-n',
            '-loglevel', 'error',
        ]
        if CONFIG['duration'] > 0: # –î–æ–±–∞–≤–ª—è–µ–º stream_loop —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ duration > 0
            cmd.extend(['-stream_loop', '-1'])
        cmd.extend([ # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã
            '-i', CONFIG['temp_file'],
            '-c:a', CONFIG['codec'],
            '-ar', CONFIG['sample_rate'],
            '-ac', CONFIG['channels'],
            '-b:a', CONFIG['bitrate'],
        ])
        if CONFIG['duration'] > 0: # –î–æ–±–∞–≤–ª—è–µ–º -t —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ duration > 0
            cmd.extend(['-t', str(CONFIG['duration'])])
        cmd.append(CONFIG['output'])

        if CONFIG['show_progress']:
            cmd[1:1] = ['-progress', 'pipe:1']

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
        log("‚öô –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ...")
        process = subprocess.Popen(
            cmd,
            stderr=subprocess.PIPE,
            stdout=subprocess.PIPE, # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ PIPE –¥–ª—è stdout
            text=True,
            bufsize=1,
            universal_newlines=True
        )

        if CONFIG['show_progress']:
            if CONFIG['duration'] > 0: # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ duration > 0
                print("\n–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
                while True:
                    line = process.stdout.readline() # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ stdout
                    if not line:
                        break
                    if 'out_time=' in line:
                        current_time = parse_time(line.split('=')[1].strip())
                        print_progress(current_time, CONFIG['duration'])
            else: # –ï—Å–ª–∏ duration == 0, –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–¥–µ—Ç
                print("\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ (–ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –¥–ª—è duration=0)...")
                while True:
                    line = process.stdout.readline() # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ stdout
                    if not line:
                        break

        process.wait()
        if process.returncode != 0:
            raise subprocess.CalledProcessError(process.returncode, cmd)

        print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        log(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {datetime.now() - start_script}")
        log(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {CONFIG['output']}")

    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", file=sys.stderr)
        sys.exit(1)
    finally:
        if os.path.exists(CONFIG['temp_file']):
            log("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            os.remove(CONFIG['temp_file'])
        log("üõë –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")


if __name__ == "__main__":
    main()