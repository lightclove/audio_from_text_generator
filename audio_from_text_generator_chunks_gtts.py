"""
–ú–æ–¥—É–ª—å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Google TTS
–í–µ—Ä—Å–∏—è 3.1 (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–æ–∫ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
"""

from datetime import datetime
from dotenv import load_dotenv
from gtts import gTTS
import subprocess
import os
import sys
import time
import shutil
import hashlib

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
CONFIG = {
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞
    "input": os.getenv("INPUT_FILE", "input.txt"),
    "output": os.getenv("OUTPUT_FILE", "output.ogg"),
    "temp_file": os.getenv("TEMP_FILE", "temp_combined.mp3"),
    "temp_dir": os.getenv("TEMP_DIR", "tts_chunks"),
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
    "chunk_size": max(500, int(os.getenv("CHUNK_SIZE", 3500))),  # –ú–∏–Ω–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤
    "delay_between_chunks": max(5, int(os.getenv("DELAY_BETWEEN_CHUNKS", 20))),
    "max_filename_length": min(255, int(os.getenv("MAX_FILENAME_LENGTH", 100))),
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ
    "codec": os.getenv("AUDIO_CODEC", "libopus"),
    "channels": os.getenv("AUDIO_CHANNELS", "1"),
    "bitrate": os.getenv("BITRATE", "164k"),
    "sample_rate": os.getenv("SAMPLE_RATE", "48000"),
    "language": os.getenv("LANGUAGE", "ru"),
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    "max_retries": max(1, int(os.getenv("MAX_RETRIES", 5))),
    "retry_delay": max(1, int(os.getenv("RETRY_DELAY", 15))),
    "backoff_factor": max(1, int(os.getenv("BACKOFF_FACTOR", 3))),
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    "duration": max(0, int(os.getenv("DURATION", 0))),
    "verbose": os.getenv("VERBOSE", "true").lower() == "true",
    "overwrite": os.getenv("OVERWRITE_OUTPUT", "true").lower() == "true",
}


def log(message: str, level: str = "INFO"):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—Ä–æ–≤–Ω—è–º–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏"""
    if CONFIG["verbose"] or level in ("ERROR", "WARN"):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        colored_level = {
            "INFO": "\033[94mINFO\033[0m",  # –°–∏–Ω–∏–π
            "WARN": "\033[93mWARN\033[0m",  # –ñ–µ–ª—Ç—ã–π
            "ERROR": "\033[91mERROR\033[0m",  # –ö—Ä–∞—Å–Ω—ã–π
            "DEBUG": "\033[90mDEBUG\033[0m",  # –°–µ—Ä—ã–π
        }.get(level, level)
        print(f"[{timestamp}] {colored_level} - {message}", flush=True)


def split_text(text: str, chunk_size: int) -> list:
    """
    –£–º–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1. –ò—â–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö chunk_size
    2. –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –¥–µ–ª–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑—Ä—ã–≤
    3. –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —á–∞–Ω–∫–∏
    """
    chunks = []
    start = 0
    text_length = len(text)
    separators = ["\n\n", "\n", ". ", "! ", "? ", "; ", ", ", " "]

    log(f"–ù–∞—á–∞–ª–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (–æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {text_length} —Å–∏–º–≤–æ–ª–æ–≤)", "DEBUG")

    while start < text_length:
        end = min(start + chunk_size, text_length)

        # –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ —Ä–∞–∑—Ä—ã–≤–∞
        if end < text_length:
            best_pos = -1
            for sep in separators:
                pos = text.rfind(sep, start, end + len(sep))
                if pos > best_pos:
                    best_pos = pos

            if best_pos != -1 and (best_pos - start) > chunk_size * 0.5:
                end = best_pos + 1  # –í–∫–ª—é—á–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫

        chunk = text[start:end].strip()
        if chunk:
            chunks.append(chunk)
            log(f"–°–æ–∑–¥–∞–Ω —á–∞–Ω–∫ [{len(chunks)}] —Ä–∞–∑–º–µ—Ä–æ–º {len(chunk)} —Å–∏–º–≤–æ–ª–æ–≤", "DEBUG")

        start = end

    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–∞–ª–µ–Ω—å–∫–∏—Ö —á–∞–Ω–∫–æ–≤
    if len(chunks) > 1:
        merged = []
        buffer = chunks[0]
        for chunk in chunks[1:]:
            if len(buffer) + len(chunk) <= chunk_size * 1.2:
                buffer += " " + chunk
                log(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —á–∞–Ω–∫–æ–≤ [{len(merged) + 1}]", "DEBUG")
            else:
                merged.append(buffer)
                buffer = chunk
        merged.append(buffer)
        log(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —á–∞–Ω–∫–æ–≤: {len(chunks)} ‚Üí {len(merged)}", "DEBUG")
        return merged

    return chunks


def generate_tts(text: str, output_file: str) -> bool:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Google TTS —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        True - —É—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        False - –Ω–µ—É–¥–∞—á–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
    """
    log(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TTS –¥–ª—è —Ñ–∞–π–ª–∞ {output_file}", "DEBUG")

    for attempt in range(CONFIG["max_retries"] + 1):
        try:
            tts = gTTS(
                text=text,
                lang=CONFIG["language"],
                lang_check=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
                slow=False,
                timeout=30,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            )
            tts.save(output_file)
            log(f"–£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è {output_file} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})", "DEBUG")
            return True
        except Exception as e:
            error_msg = str(e).lower()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
            if "429" in error_msg or "too many requests" in error_msg:
                delay = CONFIG["retry_delay"] * (CONFIG["backoff_factor"] ** attempt)
                log(
                    f"–û—à–∏–±–∫–∞ 429: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{CONFIG['max_retries']} —á–µ—Ä–µ–∑ {delay} —Å–µ–∫",
                    "WARN",
                )
                time.sleep(delay)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
            elif "timed out" in error_msg:
                log(
                    f"–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{CONFIG['max_retries']}",
                    "WARN",
                )
                time.sleep(10)

            else:
                log(
                    f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {type(e).__name__} - {str(e)}",
                    "ERROR",
                )
                return False

    log(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è {output_file}", "ERROR")
    return False


def ffmpeg_process():
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ FFmpeg —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞
    –≠—Ç–∞–ø—ã:
    1. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∫–æ–Ω–µ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    2. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–∞
    3. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞
    """
    log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ FFmpeg", "DEBUG")

    try:
        cmd = [
            "ffmpeg",
            "-y" if CONFIG["overwrite"] else "-n",
            "-loglevel",
            "error",
            "-i",
            CONFIG["temp_file"],
            "-c:a",
            CONFIG["codec"],
            "-ar",
            CONFIG["sample_rate"],
            "-ac",
            CONFIG["channels"],
            "-b:a",
            CONFIG["bitrate"],
            "-af",
            "loudnorm=I=-16:LRA=11:TP=-1.5",  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–∞
            "-hide_banner",
        ]

        if CONFIG["duration"] > 0:
            cmd.extend(["-t", str(CONFIG["duration"])])

        cmd.append(CONFIG["output"])

        result = subprocess.run(cmd, check=True, capture_output=True, text=True)

        log(f"FFmpeg –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º {result.returncode}", "DEBUG")

    except subprocess.CalledProcessError as e:
        log(f"–û—à–∏–±–∫–∞ FFmpeg (–∫–æ–¥ {e.returncode}): {e.stderr}", "ERROR")
        raise


def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    start_time = datetime.now()
    temp_files = []
    success_count = 0
    concat_list = None

    try:
        log("=" * 60)
        log(f"üöÄ –°–¢–ê–†–¢ –ü–†–û–¶–ï–°–°–ê –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò")
        log(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {os.path.abspath(CONFIG['input'])}")
        log(f"–¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª: {os.path.abspath(CONFIG['output'])}")
        log("=" * 60)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not os.path.exists(CONFIG["input"]):
            raise FileNotFoundError(f"–§–∞–π–ª {CONFIG['input']} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if os.path.getsize(CONFIG["input"]) == 0:
            raise ValueError("–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –ø—É—Å—Ç")

        # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        with open(CONFIG["input"], "r", encoding="utf-8") as f:
            text = f.read().strip()

        log(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(text):,} —Å–∏–º–≤–æ–ª–æ–≤", "INFO")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        os.makedirs(CONFIG["temp_dir"], exist_ok=True)
        log(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.path.abspath(CONFIG['temp_dir'])}", "DEBUG")

        # –†–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        chunks = split_text(text, CONFIG["chunk_size"])
        log(f"–ü–æ–ª—É—á–µ–Ω–æ {len(chunks)} —á–∞—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", "INFO")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–æ–≤
        for idx, chunk in enumerate(chunks):
            chunk_hash = hashlib.md5(chunk.encode()).hexdigest()[:8]
            temp_file = os.path.join(
                CONFIG["temp_dir"], f"part_{idx + 1:04d}_{chunk_hash}.mp3"
            )

            log(f"[{idx + 1}/{len(chunks)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ {temp_file}", "INFO")
            log(
                f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞–Ω–∫–∞ (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤): {chunk[:50].replace('\n', ' ')}...",
                "DEBUG",
            )

            if generate_tts(chunk, temp_file):
                temp_files.append(temp_file)
                success_count += 1

                # –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                progress = (idx + 1) / len(chunks) * 100
                log(
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}% | –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}/{len(chunks)}",
                    "INFO",
                )

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                if idx < len(chunks) - 1:
                    delay = CONFIG["delay_between_chunks"]
                    log(f"–ü–∞—É–∑–∞ {delay} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º...", "DEBUG")
                    time.sleep(delay)
            else:
                log(f"–ü—Ä–æ–ø—É—Å–∫ —á–∞–Ω–∫–∞ {idx + 1} –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", "WARN")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        if success_count == 0:
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
        concat_list = os.path.join(CONFIG["temp_dir"], "concat_list.txt")
        with open(concat_list, "w", encoding="utf-8") as f:
            for file in temp_files:
                f.write(f"file '{os.path.abspath(file)}'\n")

        log(f"–°–æ–∑–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {concat_list}", "DEBUG")

        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
        log("–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤...", "INFO")
        try:
            subprocess.run(
                [
                    "ffmpeg",
                    "-y",
                    "-f",
                    "concat",
                    "-safe",
                    "0",
                    "-i",
                    concat_list,
                    "-c",
                    "copy",
                    "-loglevel",
                    "error",
                    CONFIG["temp_file"],
                ],
                check=True,
                capture_output=True,
            )
        except subprocess.CalledProcessError as e:
            log(f"–û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {e.stderr.decode()}", "ERROR")
            raise

        # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ
        log("–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞...", "INFO")
        ffmpeg_process()

        # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        log("=" * 60)
        log(f"‚úÖ –£–°–ü–ï–®–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï")
        log(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {datetime.now() - start_time}")
        log(f"–ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª: {os.path.abspath(CONFIG['output'])}")
        log(
            f"–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {success_count}/{len(chunks)} —á–∞–Ω–∫–æ–≤ ({success_count / len(chunks) * 100:.1f}%)"
        )
        log("=" * 60)

    except Exception as e:
        log("=" * 60)
        log(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {type(e).__name__}", "ERROR")
        log(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}", "ERROR")
        log("=" * 60)
        sys.exit(1)

    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        def safe_remove(path):
            try:
                if path and os.path.exists(path):
                    if os.path.isdir(path):
                        shutil.rmtree(path)
                        log(f"–£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {path}", "DEBUG")
                    else:
                        os.remove(path)
                        log(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {path}", "DEBUG")
            except Exception as e:
                log(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {path}: {str(e)}", "WARN")

        log("–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...", "INFO")
        safe_remove(CONFIG["temp_dir"])
        safe_remove(CONFIG["temp_file"])
        if concat_list:
            safe_remove(concat_list)


if __name__ == "__main__":
    main()
